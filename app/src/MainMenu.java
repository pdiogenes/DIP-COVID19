import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

import processing.Threshold;
import utilities.Grayscale;
import utilities.MatConversion;
import hist.Histogram;

/**
 *
 * @author Pedro
 */
public class MainMenu extends javax.swing.JFrame {

    MainImage mainImage;
    JPanel sampleArea, histogramArea;
    JLabel imgLabel, sampleLabel;
    Mat sample, sampleT;
    BufferedImage image, sampleImage;
    Mat img, imgT;
    int imgw, imgh;
    JFrame imageFrame = null, sampleFrame = null, resultFrame = null;
    int threshValue;

    public MainMenu() {
        initComponents();
        loadLibraries();
        sample = new Mat();
        sampleT = new Mat();
        img = new Mat();
        imgT = new Mat();
    }

    public static void loadLibraries() {
        try {
            InputStream in = null;
            File fileOut = null;
            String osName = System.getProperty("os.name");
            String opencvpath = System.getProperty("user.dir");
            if (osName.startsWith("Windows")) {
                int bitness = Integer.parseInt(System.getProperty("sun.arch.data.model"));
                if (bitness == 32) {
                    opencvpath = opencvpath + "\\opencv\\x86\\";
                } else if (bitness == 64) {
                    opencvpath = opencvpath + "\\opencv\\x64\\";
                } else {
                    opencvpath = opencvpath + "\\opencv\\x86\\";
                }
            } else if (osName.equals("Mac OS X")) {
                opencvpath = opencvpath + "Your path to .dylib";
            }
            System.load(opencvpath + Core.NATIVE_LIBRARY_NAME + ".dll");
        } catch (Exception e) {
            throw new RuntimeException("Failed to load opencv native library", e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        lblGuide = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuAbrirImg = new javax.swing.JMenuItem();
        menuProc = new javax.swing.JMenu();
        btnLBPH = new javax.swing.JMenuItem();
        btnCross = new javax.swing.JMenuItem();
        btnHaralick = new javax.swing.JMenuItem();
        btnCircularidade = new javax.swing.JMenuItem();
        btnArea = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PID-Corona");

        lblGuide.setText("Seleciona uma imagem em Arquivo > Abrir Imagem");

        jMenu1.setText("Arquivo");

        menuAbrirImg.setText("Abrir Imagem");
        menuAbrirImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirImgActionPerformed(evt);
            }
        });
        jMenu1.add(menuAbrirImg);

        jMenuBar1.add(jMenu1);

        menuProc.setText("Processar");
        menuProc.setEnabled(false);

        btnLBPH.setText("LBPH");
        btnLBPH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLBPHActionPerformed(evt);
            }
        });
        menuProc.add(btnLBPH);

        btnCross.setText("Cross Correlation");
        btnCross.setToolTipText("");
        btnCross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrossActionPerformed(evt);
            }
        });
        menuProc.add(btnCross);

        btnHaralick.setText("Haralick");
        btnHaralick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHaralickActionPerformed(evt);
            }
        });
        menuProc.add(btnHaralick);

        btnCircularidade.setText("Forma - Circularidade");
        btnCircularidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCircularidadeActionPerformed(evt);
            }
        });
        menuProc.add(btnCircularidade);

        btnArea.setText("Forma - √Årea");
        btnArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAreaActionPerformed(evt);
            }
        });
        menuProc.add(btnArea);

        jMenuBar1.add(menuProc);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(lblGuide)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblGuide)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnHaralickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHaralickActionPerformed
        this.show_threshold();
        mainImage.setState("Haralick");
    }//GEN-LAST:event_btnHaralickActionPerformed

    private void btnCrossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrossActionPerformed
        this.show_threshold();
        mainImage.setState("Cross");
    }//GEN-LAST:event_btnCrossActionPerformed

    private void btnLBPHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLBPHActionPerformed
        this.show_threshold();
        mainImage.setState("LBP");
    }//GEN-LAST:event_btnLBPHActionPerformed

    private void btnCircularidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCircularidadeActionPerformed
        this.show_threshold();
        mainImage.setState("Circ");
    }//GEN-LAST:event_btnCircularidadeActionPerformed

    private void btnAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAreaActionPerformed
        this.show_threshold();
        mainImage.setState("Area");
    }//GEN-LAST:event_btnAreaActionPerformed

    private void menuFindActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menuFindActionPerformed
        // mainImage.test();
        this.show_threshold();
    }// GEN-LAST:event_menuFindActionPerformed

    private void menuAbrirImgActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem3ActionPerformed
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Imagens Permitidas", "jpg", "png", "tiff");
        fc.setFileFilter(filter);
        // fc.setCurrentDirectory(new File("./src/images"));
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            Mat image = Imgcodecs.imread(file.getPath());
            Mat imageBW = new Mat(); 
            Imgproc.cvtColor(image, imageBW, Imgproc.COLOR_RGB2GRAY);
            imgw = imageBW.width();
            imgh = imageBW.height();
            Core.normalize(imageBW, imageBW, 0, 255, Core.NORM_MINMAX);
            this.img = imageBW.clone();
            this.show_image();
        }
    }// GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btnArea;
    private javax.swing.JMenuItem btnCircularidade;
    private javax.swing.JMenuItem btnCross;
    private javax.swing.JMenuItem btnHaralick;
    private javax.swing.JMenuItem btnLBPH;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JLabel lblGuide;
    private javax.swing.JMenuItem menuAbrirImg;
    private javax.swing.JMenu menuProc;
    // End of variables declaration//GEN-END:variables

    public void changeButtonState(boolean enable){
        if(enable){
            menuProc.setEnabled(true);
        } else menuProc.setEnabled(false);
    }
    
    public void show_image() { // http://blog.sodhanalibrary.com/2015/04/select-rectangular-area-in-image-using.html
        // checks if theres already one opened
        if (imageFrame != null) {
            imageFrame.dispose();
        }
        
        if(sampleFrame != null){
            sampleFrame.dispose();
        }
        
        if(resultFrame != null){
            resultFrame.dispose();
        }
        
        // creates histogram for image
        Histogram h = new Histogram(img);
        Mat hist = h.createHistImage();
        BufferedImage imageHist = (BufferedImage) HighGui.toBufferedImage(hist);
        JLabel histImage = new JLabel(new ImageIcon(imageHist));
        
        // create main frame
        imageFrame = new JFrame("Imagem");
        imageFrame.getContentPane().setLayout(null);
        imageFrame.setSize(imgw + 100 + imageHist.getWidth(), imgh + 80);
        
        // adds the histogram image
        histImage.setBounds(imgw + 25, 10, imageHist.getWidth(), imageHist.getHeight());
        imageFrame.getContentPane().add(histImage);

        // create class for main image
        mainImage = new MainImage(this.img, this);
        
        // adds a button to open the image sample selection
        JButton btnOpenSample = new JButton("Open sample selection");
        btnOpenSample.setBounds(imgw + 25, imageHist.getHeight() + 10, imageHist.getWidth(), 30);
        imageFrame.getContentPane().add(btnOpenSample);
        
        btnOpenSample.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                imageFrame.dispose();
                show_sample();
            }

        });
        
        // adds instructions and zoom buttons
        JButton zoomIn = new JButton(" + "), zoomOut = new JButton(" - ");
        JLabel instructions = new JLabel("Click the buttons to zoom");
        instructions.setBounds(220, imgh + 25, imageFrame.getWidth() - 220, 20);
        zoomIn.setBounds(10, imgh + 25, 100, 20);
        zoomOut.setBounds(110, imgh + 25, 100, 20);
        imageFrame.getContentPane().add(zoomIn);
        imageFrame.getContentPane().add(zoomOut);
        imageFrame.getContentPane().add(instructions);
        
        // zoom button listeners
        zoomIn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mainImage.setZoomFactor(1.1 * mainImage.getZoomFactor());
                mainImage.repaint();
            }
        });
        
        zoomOut.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mainImage.setZoomFactor(mainImage.getZoomFactor() / 1.1);
                mainImage.repaint();
            }
        });
        
        // adds m ain image to container
        mainImage.setBounds(10, 10, imgw, imgh);
        imageFrame.getContentPane().add(mainImage);
        imageFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // shows main image frame
        imageFrame.setVisible(true);
        imageFrame.setResizable(false);
        lblGuide.setText("Selecione o processamento no menu Processar");

    }
    
    public void show_sample() {
        // checks if theres already one opened
        if (sampleFrame != null) {
            sampleFrame.dispose();
        }
        
        // create main frame
        sampleFrame = new JFrame("Imagem");
        sampleFrame.getContentPane().setLayout(null);
        sampleFrame.setSize(imgw * 2 + 25, imgh + 80);

        // create class for main image
        mainImage = new MainImage(this.img, this);

        // adds instructions
        // adds instructions and zoom buttons
        JButton zoomIn = new JButton(" + "), zoomOut = new JButton(" - ");
        JLabel instructions = new JLabel("Click the buttons to zoom  --  "
                + "Click and Drag to select sample area -- "
                + "After selecting select the processing method on mainMenu");
        instructions.setBounds(220, imgh + 25, imageFrame.getWidth() - 220, 20);
        zoomIn.setBounds(10, imgh + 25, 100, 20);
        zoomOut.setBounds(110, imgh + 25, 100, 20);
        sampleFrame.getContentPane().add(zoomIn);
        sampleFrame.getContentPane().add(zoomOut);
        sampleFrame.getContentPane().add(instructions);
        
        // zoom button listeners
        zoomIn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mainImage.setZoomFactor(1.1 * mainImage.getZoomFactor());
                mainImage.repaint();
            }
        });
        
        zoomOut.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mainImage.setZoomFactor(mainImage.getZoomFactor() / 1.1);
                mainImage.repaint();
            }
        });

        // creates a panel in which the sample image will be drawn
        sampleArea = new JPanel();
        sampleArea.setBounds(imgw + 50, 10, imgw, imgh);
        sampleFrame.getContentPane().add(sampleArea);

        // adds m ain image to container

        mainImage.setBounds(10, 10, imgw, imgh);
        sampleFrame.getContentPane().add(mainImage);
        sampleFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // shows main image frame
        sampleFrame.setVisible(true);
        sampleFrame.setResizable(false);
        lblGuide.setText("Selecione o processamento no menu Processar");
        
        mainImage.addListeners();

    }


    public void show_threshold() { // https://docs.opencv.org/3.4/db/d8e/tutorial_threshold.html
        // creating the frame for threshold value selection
        JFrame thresh = new JFrame("Threshold");
        JPanel slider = new JPanel();
        slider.setLayout(new BoxLayout(slider, BoxLayout.PAGE_AXIS));
        JButton btnConfirmar = new JButton("Confirmar");
        btnConfirmar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                thresh.dispose();
                mainImage.setSampleMat(sampleT, imgT);
            }

        });

        // adding labels
        slider.add(new JLabel("Valor do Limiar"));
        // Create Trackbar to choose Threshold value
        JSlider sliderThreshValue = new JSlider(0, 255, 0);
        sliderThreshValue.setMajorTickSpacing(50);
        sliderThreshValue.setMinorTickSpacing(10);
        sliderThreshValue.setPaintTicks(true);
        sliderThreshValue.setPaintLabels(true);
        // adds the slider to the frame
        slider.add(sliderThreshValue);

        // get the OpenCV matrix for the sample iamge
        try {
            sample = MatConversion.BufferedImage2Mat(Grayscale.getGray(sampleImage));
        } catch (IOException e) {
        }

        // changes threshold depending on slider value
        sliderThreshValue.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                JSlider source = (JSlider) e.getSource();
                threshValue = source.getValue();
                sampleT = Threshold.threshold(sample, threshValue);
                imgT = Threshold.threshold(img, threshValue);
                image = (BufferedImage) HighGui.toBufferedImage(imgT);
                sampleImage = (BufferedImage) HighGui.toBufferedImage(sampleT);
                imgLabel.setIcon(new ImageIcon(image));
                sampleLabel.setIcon(new ImageIcon(sampleImage));
                thresh.repaint();
            }
        });

        thresh.getContentPane().add(slider, BorderLayout.PAGE_START);
        imgLabel = new JLabel(new ImageIcon((BufferedImage) HighGui.toBufferedImage(img)));
        sampleLabel = new JLabel(new ImageIcon(sampleImage));
        thresh.getContentPane().add(imgLabel, BorderLayout.CENTER);
        thresh.getContentPane().add(sampleLabel, BorderLayout.AFTER_LINE_ENDS);
        thresh.getContentPane().add(btnConfirmar, BorderLayout.PAGE_END);

        // sets the window size
        int windowW = Math.max(400, img.width());
        int windowH = Math.max(400, img.height() + 100);

        thresh.setSize(windowW, windowH);
        thresh.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        thresh.setVisible(true);
    }
    
    public void show_result(Mat resultado, int numEncontrados){
        resultFrame = new JFrame();
        
        if(sampleFrame != null){
            sampleFrame.dispose();
        }
        
        //gets result image from Mat
        BufferedImage resultImage = (BufferedImage) HighGui.toBufferedImage(resultado);
        
        // creates frame to show result
        resultFrame.getContentPane().setLayout(null);
        resultFrame.setSize(resultImage.getWidth() + 50, resultImage.getHeight() + 100);
        
        // adds result image into frame
        JLabel resultLabelImg = new JLabel(new ImageIcon(resultImage));
        resultLabelImg.setBounds(10, 10, resultImage.getWidth(), resultImage.getHeight());
        resultFrame.getContentPane().add(resultLabelImg);
        
        // adds text informing how many occurances were detected
        JLabel lblResultText = new JLabel("Found " + numEncontrados + " occurances of the selected pattern");
        lblResultText.setBounds(10, resultImage.getHeight() + 10, resultImage.getWidth(), 20);
        resultFrame.getContentPane().add(lblResultText);
        
        //shows the frame
        resultFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        resultFrame.setVisible(true);
        
        
    }

    public void drawSample(BufferedImage area) { // http://blog.sodhanalibrary.com/2015/04/select-rectangular-area-in-image-using.html
        Graphics g = sampleArea.getGraphics();
        sampleImage = area;
        g.clearRect(0, 0, imgw, imgh);
        g.drawImage(area, 0, 0, null);
    }

}
